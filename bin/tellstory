#!python

import sys
import os
import argparse
import logging
import json
import errno

from urllib.parse import urlparse
from argparse import RawTextHelpFormatter

import requests

from yaml import load, Loader

from raintale.storytellers.storytellers import storytellers, storytellers_without_templates
from raintale.storytellers.filetemplate import FileTemplateStoryTeller
from raintale import package_directory

logger = logging.getLogger(__name__)

def get_logger(appname, loglevel, logfile):

    logger = logging.getLogger(appname)

    if logfile == sys.stdout:
        logging.basicConfig( 
            format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            level=loglevel)
    else:
        logging.basicConfig( 
            format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            level=loglevel,
            filename=logfile)

    return logger

def calculate_loglevel(verbose=False, quiet=False):
  
    # verbose trumps quiet
    if verbose:
        return logging.DEBUG

    if quiet:
        return logging.WARNING

    return logging.INFO

def generate_list_of_storytellers_and_presets():

    storytellers = []
    presets = []

    template_dir = "{}/templates".format(package_directory)

    for filename in os.listdir(template_dir):

        preset, fileformat = filename.split('.')
        storytellers.append(fileformat)
        presets.append(preset)

    return storytellers, presets

def process_arguments(args):

    parser = argparse.ArgumentParser(prog="{}".format(args[0]),
        description='Given a list of story elements, including URLs to archived web pages, raintale publishes them to the specified service.',
        formatter_class=RawTextHelpFormatter
        )

    parser.add_argument('-i', '--input', dest='input_filename',
        required=True,
        help="An input file containing the memento URLs for use in the story."
    )

    discovered_storytellers, discovered_presets = generate_list_of_storytellers_and_presets()

    formatted_storytellers_list = ""
    storytellers_already_in_help = []

    for storyteller in storytellers:
        helptext = "* {} - {}\n\t".format(
            storyteller, storytellers[storyteller].description
        )
        formatted_storytellers_list += helptext
        storytellers_already_in_help.append(storyteller)

    for storyteller in sorted(list(set(discovered_storytellers))):

        if storyteller not in storytellers_already_in_help:
            formatted_storytellers_list += "* {} - writes output to this file format, " \
                "requires -o option to specify the output filename.\n\t".format(storyteller)
            storytellers_already_in_help.append(storyteller)

    formatted_preset_list = ""
    for preset in sorted(list(set(discovered_presets))):
        formatted_preset_list += "* {}\n\t".format(preset)


    parser.add_argument('--storyteller', dest='storyteller',
        required=True,
        help="""The service or file format used to tell the story. Options are:
        {}
        """.format(formatted_storytellers_list)
    )

    parser.add_argument('--preset', dest='storytelling_preset',
        required=False, default='default',
        help="""The preset used for a given story, typically reflecting the 
        surrogate used to tell the story and the layout of the story.
        {}
        """.format(formatted_preset_list)
    )

    parser.add_argument('--story-template', dest='story_template_filename',
        required=False,
        help="The file containing the template for the story in Jinja2 format."
    )

    parser.add_argument('--title', dest='title',
        required=False,
        help="The title used for the story."
    )

    parser.add_argument('--collection-url', dest='collection_url',
        required=False,
        help="The URL of the collection from which the story is derived."
    )

    parser.add_argument('--generated-by', dest='generated_by',
        required=False,
        help="The name of the algorithm or person who created this story."
    )

    parser.add_argument('--mementoembed_api', dest='mementoembed_api',
        required=False, 
        default=["http://localhost:5550", "http://mementoembed:5550", "http://localhost:5000"],
        help="The URL of the MementoEmbed instance used for generating surrogates"
    )

    parser.add_argument('-l', '--logfile', dest='logfile',
        default=sys.stdout,
        help="If specified, logging output will be written to this file. "
            "Otherwise, it will print to the screen."
    )

    parser.add_argument('-c', '--credentials_file', dest='credentials_file',
        required=False, default=None,
        help="The file containing the credentials needed to use a storytelling service, in YAML format."
    )

    parser.add_argument('-v', '--verbose', dest='verbose',
        action='store_true',
        help="This will raise the logging level to debug for more verbose output")

    parser.add_argument('-q', '--quiet', dest='quiet',
        action='store_true',
        help="This will lower the logging level to only show warnings or errors")

    parser.add_argument('-o', '--output-file', dest='output_file',
        required=False, default=None,
        help="If needed by the storyteller, the output file to which raintale will write the story contents."
    )

    args = parser.parse_args()

    return parser, args

def test_mementoembed_endpoint(url):

    status = False

    logger.info("testing MementoEmbed endpoint at {}".format(url))

    try:
        requests.get(url)
        status = True
    except requests.ConnectionError:
        logger.error("Failed to connect to MementoEmbed endpoint at {}".format(url))

    return status

def get_storyteller(parser, args):

    storyteller = None

    discovered_storytellers, discovered_presets = generate_list_of_storytellers_and_presets()

    if args.storyteller in storytellers:
        storyteller_class = storytellers[args.storyteller]
    else:
        if args.storyteller in  discovered_storytellers:
            storyteller_class = FileTemplateStoryTeller
        else:
            logger.critical("Unknown storyteller {}, cannot continue...".format(args.storyteller))
            sys.exit(errno.EINVAL)

    if storyteller_class.requires_file == True:

        if args.output_file is None:
            parser.error(
                'storyteller of type {} requires an output file, please supply an output file with the -o option'.format(
                    args.storyteller)
            )
        else:
            logger.info("creating Storyteller of type {} with output file {}".format(storyteller_class, args.output_file))
            storyteller = storyteller_class(args.output_file)
            logger.info("output file for storyteller {} is {}".format(storyteller, storyteller.output_filename))
    
    if storyteller_class.requires_credentials == True:
    
        if args.credentials_file is None:
            parser.error(
                "storyteller of type {} requires a credentials file, please supply a credentials file with the -c option".format(
                    args.storyteller)
            )
        else:
            storyteller = storyteller_class(args.credentials_file)

    return storyteller

def format_data(input_filename, title, collection_url, generated_by, parser):

    story_data = {}

    logger.info("reading story data from file {}".format(input_filename))

    with open(input_filename) as f:

        try:
            story_data = json.load(f)
            
            if 'title' not in story_data:
                parser.error("No story title found in JSON input, a title is required.")
                sys.exit(errno.EINVAL)

            if title is not None:
                logger.warning("overriding title of '{}' from {} with "
                    "title '{}' supplied as argument".format(
                        story_data['title'], input_filename, title
                    ))
                story_data['title'] = title

        except json.JSONDecodeError:

            logger.warning("story data is not JSON, attempting to read as "
                "a list of memento URLs in a text file")

            if title == None:
                parser.error("Text file format requires a title be supplied on the command line.")
                sys.exit(errno.EINVAL)

            f.seek(0)
            story_data['title'] = title
            
            # if collection_url is not None:
            #     logger.debug("storing given collection URL of {}".format(collection_url))
            story_data['collection_url'] = collection_url

            # if generated_by is not None:
            #     logger.debug("storing generated by value of {}".format(generated_by))
            story_data['generated_by'] = generated_by

            story_data['metadata'] = {}

            story_data['elements'] = []

            logger.info("set story title to {}".format(
                story_data['title']
            ))

            logger.info("creating story elements")

            for line in f:

                line = line.strip()
                o = urlparse(line)

                if o.scheme in ['http', 'https']:

                    logger.debug("adding link {} to story".format(line))

                    element = {
                        'type': 'link',
                        'value': line
                    }

                    story_data['elements'].append(element)

                else:
                    logger.warning(
                        "Skipping URL with unsupported scheme: {}".format(line)
                    )

            logger.warning("list of memento URLs has been built successfully")
        
        logger.info("data loaded for story with title {}".format(story_data['title']))

    return story_data

def choose_mementoembed_api(mementoembed_api_candidates):

    mementoembed_api = ""

    if type(mementoembed_api_candidates) == list:
        statusii = []

        env_mementoembed_api_candidate = os.getenv("MEMENTOEMBED_API_ENDPOINT")

        if env_mementoembed_api_candidate is not None:
            logger.info("adding {} from the environment to the list of candidate MementoEmbed API endpoints".format(env_mementoembed_api_candidate))
            mementoembed_api_candidates.insert(
                0, env_mementoembed_api_candidate
            )

        for url in mementoembed_api_candidates:
            status = test_mementoembed_endpoint(url)
            statusii.append(status)

            if status == True:
                logger.info("Successfully connected to MementoEmbed API at {}, using this endpoint".format(url))
                mementoembed_api = url
                break

        if True not in statusii:
            logger.error("Failed to connect to MementoEmbed API, cannot continue.")
            sys.exit(errno.EHOSTDOWN)

    else:
        
        logger.info("using MementoEmbed endpoint {}, specified via command line flag".format(mementoembed_api_candidates))

        status = test_mementoembed_endpoint(mementoembed_api_candidates)

        if status == False:
            logger.error("Failed to connect to MementoEmbed API, cannot continue.")
            sys.exit(errno.EHOSTDOWN)
        else:
            mementoembed_api = mementoembed_api_candidates

    logger.info("For building story elements, using MementoEmbedAPI at {}".format(mementoembed_api))

    return mementoembed_api

def choose_story_template(storyteller, preset, given_story_template_filename):

    story_template = ""

    if given_story_template_filename is None:

        story_template_filename = "{}/templates/{}.{}".format(
            package_directory, args.storytelling_preset, args.storyteller
        )

    logger.info("using story template filename {}".format(story_template_filename))

    try:

        with open(story_template_filename) as f:
            story_template = f.read()

    except FileNotFoundError:

        if given_story_template_filename is None:

            if storyteller not in storytellers_without_templates:
                logger.error("Unsupported preset {} for storyteller {}".format(preset, storyteller))
                print("EXITING DUE TO ERROR.")
                sys.exit(errno.EINVAL)

        else:
            logger.error("Cannot locate given template filename of {}".format(story_template_filename))
            print("EXITING DUE TO ERROR.")
            sys.exit(errno.EINVAL)

    return story_template

if __name__ == '__main__':

    start_message = "Beginning raintale to tell your story."
    print(start_message)

    parser, args = process_arguments(sys.argv)

    # set up logging for the rest of the system
    logger = get_logger(
        __name__, calculate_loglevel(
            verbose=args.verbose, quiet=args.quiet), 
        args.logfile)

    logger.info(start_message)

    storyteller = get_storyteller(parser, args)
    mementoembed_api = choose_mementoembed_api(args.mementoembed_api)
    story_template = choose_story_template(args.storyteller, args.storytelling_preset, args.story_template_filename)
    story_data = format_data(args.input_filename, args.title, args.collection_url, args.generated_by, parser)

    storyteller.tell_story(story_data, mementoembed_api, story_template)

    end_message = "Done telling your story. THE END."
    logger.info(end_message)
    print(end_message)
