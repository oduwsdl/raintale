#!python

import sys
import os
import argparse
import logging
import errno

from argparse import RawTextHelpFormatter
from datetime import datetime

from raintale.storytellers.storytellers import storytellers, storytellers_without_templates
from raintale.utils import format_data, choose_mementoembed_api
from raintale.storytellers.filetemplate import FileTemplateStoryTeller
from raintale import package_directory
from raintale.version import __appversion__

logger = logging.getLogger(__name__)

def get_logger(appname, loglevel, logfile):

    logger = logging.getLogger(appname)

    if logfile == sys.stdout:
        logging.basicConfig( 
            format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            level=loglevel)
    else:
        logging.basicConfig( 
            format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            level=loglevel,
            filename=logfile)

    return logger

def calculate_loglevel(verbose=False, quiet=False):
  
    # verbose trumps quiet
    if verbose:
        return logging.DEBUG

    if quiet:
        return logging.WARNING

    return logging.INFO

def generate_list_of_storytellers_and_presets():

    storytellers = []
    presets = []

    template_dir = "{}/templates".format(package_directory)

    for filename in os.listdir(template_dir):

        preset, fileformat = filename.split('.')
        storytellers.append(fileformat)
        presets.append(preset)

    return storytellers, presets

def process_arguments(args):

    parser = argparse.ArgumentParser(prog="{}".format(args[0]),
        description='Given a list of story elements, including URLs to archived web pages, raintale publishes them to the specified service.',
        formatter_class=RawTextHelpFormatter
        )

    parser.add_argument('-i', '--input', dest='input_filename',
        required=True,
        help="An input file containing the memento URLs for use in the story."
    )

    discovered_storytellers, discovered_presets = generate_list_of_storytellers_and_presets()

    formatted_storytellers_list = ""
    storytellers_already_in_help = []

    for storyteller in storytellers:
        helptext = "* {} - {}\n\t".format(
            storyteller, storytellers[storyteller].description
        )
        formatted_storytellers_list += helptext
        storytellers_already_in_help.append(storyteller)

    for storyteller in sorted(list(set(discovered_storytellers))):

        if storyteller not in storytellers_already_in_help:
            formatted_storytellers_list += "* {} - writes output to this file format, " \
                "requires -o option to specify the output filename.\n\t".format(storyteller)
            storytellers_already_in_help.append(storyteller)

    formatted_preset_list = ""
    for preset in sorted(list(set(discovered_presets))):
        formatted_preset_list += "* {}\n\t".format(preset)


    parser.add_argument('--storyteller', dest='storyteller',
        required=True,
        help="""The service or file format used to tell the story. Options are:
        {}
        """.format(formatted_storytellers_list)
    )

    parser.add_argument('--preset', dest='storytelling_preset',
        required=False, default='default',
        help="""The preset used for a given story, typically reflecting the 
        surrogate used to tell the story and the layout of the story.
        {}
        """.format(formatted_preset_list)
    )

    parser.add_argument('--story-template', dest='story_template_filename',
        required=False,
        help="The file containing the template for the story."
    )

    parser.add_argument('--title', dest='title',
        required=False,
        help="The title used for the story."
    )

    parser.add_argument('--collection-url', dest='collection_url',
        required=False, default=None,
        help="The URL of the collection from which the story is derived."
    )

    parser.add_argument('--generated-by', dest='generated_by',
        required=False, default=None,
        help="The name of the algorithm or person who created this story."
    )

    parser.add_argument('--generation-date', dest='generation_date',
        required=False, default=datetime.now(),
        type=lambda s: datetime.strptime(s, '%Y-%m-%dT%H:%M:%S'),
        help="The generation date for this story, in YYYY-mm-ddTHH:MM:SS format. Default value is now."
    )

    parser.add_argument('--mementoembed_api', dest='mementoembed_api',
        required=False, 
        default=["http://localhost:5550", "http://mementoembed:5550", "http://localhost:5000"],
        help="The URL of the MementoEmbed instance used for generating surrogates"
    )

    parser.add_argument('-l', '--logfile', dest='logfile',
        default=sys.stdout,
        help="If specified, logging output will be written to this file. "
            "Otherwise, it will print to the screen."
    )

    parser.add_argument('-c', '--credentials_file', dest='credentials_file',
        required=False, default=None,
        help="The file containing the credentials needed to use a storytelling service, in YAML format."
    )

    parser.add_argument('-v', '--verbose', dest='verbose',
        action='store_true',
        help="This will raise the logging level to debug for more verbose output")

    parser.add_argument('-q', '--quiet', dest='quiet',
        action='store_true',
        help="This will lower the logging level to only show warnings or errors")

    parser.add_argument('-o', '--output-file', dest='output_file',
        required=False, default=None,
        help="If needed by the storyteller, the output file to which raintale will write the story contents."
    )

    parser.add_argument('--version', action='version', version="Raintale " + __appversion__, help="Version of Raintale")

    args = parser.parse_args()

    return parser, args

def get_storyteller(parser, args):

    storyteller = None

    discovered_storytellers, discovered_presets = generate_list_of_storytellers_and_presets()

    if args.storyteller in storytellers:
        storyteller_class = storytellers[args.storyteller]
    else:
        if args.storyteller in  discovered_storytellers:
            storyteller_class = FileTemplateStoryTeller
        else:
            logger.critical("Unknown storyteller {}, cannot continue...".format(args.storyteller))
            sys.exit(errno.EINVAL)

    if storyteller_class.requires_file == True:

        if args.output_file is None:
            parser.error(
                'storyteller of type {} requires an output file, please supply an output file with the -o option'.format(
                    args.storyteller)
            )
        else:
            logger.info("creating Storyteller of type {} with output file {}".format(storyteller_class, args.output_file))
            storyteller = storyteller_class(args.output_file)
            logger.info("output file for storyteller {} is {}".format(storyteller, storyteller.output_filename))
    
    if storyteller_class.requires_credentials == True:
    
        if args.credentials_file is None:
            parser.error(
                "storyteller of type {} requires a credentials file, please supply a credentials file with the -c option".format(
                    args.storyteller)
            )
        else:
            storyteller = storyteller_class(args.credentials_file)

    return storyteller

def choose_story_template(storyteller, preset, given_story_template_filename):

    story_template = ""

    if given_story_template_filename is None:

        story_template_filename = "{}/templates/{}.{}".format(
            package_directory, args.storytelling_preset, args.storyteller
        )
    else:
        story_template_filename = given_story_template_filename

    logger.info("using story template filename {}".format(story_template_filename))

    try:

        with open(story_template_filename) as f:
            story_template = f.read()

    except FileNotFoundError:

        if given_story_template_filename is None:

            if storyteller not in storytellers_without_templates:
                logger.error("Unsupported preset {} for storyteller {}".format(preset, storyteller))
                print("EXITING DUE TO ERROR.")
                sys.exit(errno.EINVAL)

        else:
            logger.error("Cannot locate given template filename of {}".format(story_template_filename))
            print("EXITING DUE TO ERROR.")
            sys.exit(errno.EINVAL)

    return story_template

if __name__ == '__main__':
    parser, args = process_arguments(sys.argv)

    start_message = "Beginning raintale to tell your story."

    # set up logging for the rest of the system
    logger = get_logger(
        __name__, calculate_loglevel(
            verbose=args.verbose, quiet=args.quiet), 
        args.logfile)

    logger.info(start_message)

    storyteller = get_storyteller(parser, args)
    mementoembed_api = choose_mementoembed_api(args.mementoembed_api)
    story_template = choose_story_template(args.storyteller, args.storytelling_preset, args.story_template_filename)
    story_data = format_data(args.input_filename, args.title, args.collection_url, args.generated_by, parser, args.generation_date)

    output_location = storyteller.tell_story(story_data, mementoembed_api, story_template)

    end_message = "Done telling your story with the {} storyteller. Output is available at {}. THE END.".format(args.storyteller, output_location)

    logger.info(end_message)
    print(end_message)
